import React, { useCallback, useEffect, useMemo, useState } from 'react';
import {
  Box,
  Button,
  Checkbox,
  CircularProgress,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  FormControl,
  FormControlLabel,
  InputLabel,
  MenuItem,
  Select,
  TextField,
  Typography,
} from '@mui/material';
import { DataGrid } from '@mui/x-data-grid';
import { useProducts } from '../admin/hooks/useProducts';
import { useCategories } from '../admin/hooks/useCategories';

const EMPTY_FORM = {
  id: null,
  name: '',
  category: '',
  category_id: '',
  price: '',
  stock: '',
  image_url: '',
  description: '',
  show_on_main_page: true,
};

export default function Products() {
  const {
    items,
    loading,
    error,
    saving,
    refresh,
    createProduct,
    updateProduct,
    deleteProduct,
  } = useProducts();

  const {
    items: categoryItems,
    loading: categoriesLoading,
    error: categoriesError,
    refresh: refreshCategories,
  } = useCategories();

  const [dialogOpen, setDialogOpen] = useState(false);
  const [form, setForm] = useState({ ...EMPTY_FORM });

  useEffect(() => {
    refresh();
    refreshCategories();
  }, [refresh, refreshCategories]);

  const categoryList = categoryItems ?? [];

  const categoriesById = useMemo(() => {
    const lookup = new Map();
    categoryList.forEach((category) => {
      lookup.set(Number(category.id), category);
    });
    return lookup;
  }, [categoryList]);

  const rows = useMemo(() => {
    return (items ?? []).map((item) => ({
      ...item,
      show_on_main_page: Boolean(item.show_on_main_page),
    }));
  }, [items]);

  const resetForm = useCallback(() => {
    setForm({ ...EMPTY_FORM });
  }, []);

  const handleOpen = useCallback(
    (row) => {
      if (row) {
        setForm({
          id: row.id,
          name: row.name ?? '',
          category: row.category ?? '',
          category_id: row.category_id ?? '',
          price: row.price ?? '',
          stock: row.stock ?? '',
          image_url: row.image_url ?? '',
          description: row.description ?? '',
          show_on_main_page: Boolean(row.show_on_main_page),
        });
      } else {
        resetForm();
      }
      setDialogOpen(true);
    },
    [resetForm]
  );

  const handleClose = useCallback(() => {
    setDialogOpen(false);
    resetForm();
  }, [resetForm]);

  const handleChange = useCallback((event) => {
    const { name, value, type, checked } = event.target;
    setForm((prev) => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
    }));
  }, []);

  const handleSubmit = useCallback(async () => {
    const { id, ...payload } = form;

    if (payload.category_id) {
      const selected = categoriesById.get(Number(payload.category_id));
      if (selected) {
        payload.category = selected.name;
      }
    } else {
      payload.category = '';
    }

    if (id) {
      await updateProduct(id, payload);
    } else {
      await createProduct(payload);
    }

    handleClose();
  }, [categoriesById, createProduct, form, handleClose, updateProduct]);

  const handleDelete = useCallback(
    async (id) => {
      const confirmed = window.confirm('Delete this product?');
      if (!confirmed) return;
      await deleteProduct(id);
    },
    [deleteProduct]
  );

  const columns = useMemo(
    () => [
      { field: 'id', headerName: 'ID', width: 80 },
      { field: 'name', headerName: 'Name', flex: 1, minWidth: 220 },
      {
        field: 'category_display',
        headerName: 'Category',
        minWidth: 160,
        valueGetter: ({ row }) => row.category_name || row.category || 'Uncategorized',
      },
      {
        field: 'price',
        headerName: 'Price',
        width: 120,
        valueFormatter: ({ value }) => {
          const amount = Number(value);
          return Number.isNaN(amount) ? '$0.00' : `$${amount.toFixed(2)}`;
        },
      },
      { field: 'stock', headerName: 'Stock', width: 100 },
      {
        field: 'show_on_main_page',
        headerName: 'Main Page',
        width: 130,
        renderCell: ({ value }) => <Checkbox checked={Boolean(value)} disabled size="small" />,
      },
      {
        field: 'actions',
        headerName: 'Actions',
        width: 190,
        sortable: false,
        filterable: false,
        renderCell: ({ row }) => (
          <Box sx={{ display: 'flex', gap: 1 }}>
            <Button size="small" variant="outlined" onClick={() => handleOpen(row)}>
              Edit
            </Button>
            <Button
              size="small"
              variant="outlined"
              color="error"
              onClick={() => handleDelete(row.id)}
            >
              Delete
            </Button>
          </Box>
        ),
      },
    ],
    [handleDelete, handleOpen]
  );

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', p: 6 }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Typography sx={{ p: 4 }} color="error">
        Error loading products: {error}
      </Typography>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
        <Typography variant="h4">Products</Typography>
        <Button variant="contained" onClick={() => handleOpen()}>
          Add Product
        </Button>
      </Box>

      <DataGrid
        rows={rows}
        columns={columns}
        getRowId={(row) => row.id}
        autoHeight
        density="comfortable"
        disableRowSelectionOnClick
        initialState={{
          pagination: {
            paginationModel: { pageSize: 10, page: 0 },
          },
        }}
        pageSizeOptions={[10, 25, 50]}
        loading={loading}
      />

      {categoriesError && (
        <Typography sx={{ mt: 2 }} color="error">
          Failed to load categories: {categoriesError}
        </Typography>
      )}

      <Dialog open={dialogOpen} onClose={handleClose} fullWidth maxWidth="sm">
        <DialogTitle>{form.id ? 'Edit Product' : 'Add Product'}</DialogTitle>
        <DialogContent dividers>
          <TextField
            name="name"
            label="Product Name"
            value={form.name}
            onChange={handleChange}
            fullWidth
            required
            margin="dense"
          />

          <FormControl
            fullWidth
            margin="dense"
            disabled={categoriesLoading && categoryList.length === 0}
          >
            <InputLabel id="category-select-label">Category</InputLabel>
            <Select
              labelId="category-select-label"
              label="Category"
              name="category_id"
              value={form.category_id}
              onChange={handleChange}
            >
              {categoriesLoading && categoryList.length === 0 ? (
                <MenuItem value="" disabled>
                  Loading categories...
                </MenuItem>
              ) : (
                <>
                  <MenuItem value="">
                    <em>Select a category</em>
                  </MenuItem>
                  {categoryList.map((category) => (
                    <MenuItem key={category.id} value={category.id}>
                      {category.name}
                    </MenuItem>
                  ))}
                </>
              )}
            </Select>
          </FormControl>

          <TextField
            name="price"
            label="Price"
            type="number"
            value={form.price}
            onChange={handleChange}
            fullWidth
            required
            margin="dense"
            inputProps={{ min: 0, step: 0.01 }}
          />

          <TextField
            name="stock"
            label="Stock"
            type="number"
            value={form.stock}
            onChange={handleChange}
            fullWidth
            margin="dense"
            inputProps={{ min: 0 }}
          />

          <TextField
            name="image_url"
            label="Image URL"
            value={form.image_url}
            onChange={handleChange}
            fullWidth
            margin="dense"
          />

          <TextField
            name="description"
            label="Description"
            value={form.description}
            onChange={handleChange}
            fullWidth
            margin="dense"
            multiline
            rows={4}
          />

          <FormControlLabel
            sx={{ mt: 1 }}
            control={
              <Checkbox
                name="show_on_main_page"
                checked={form.show_on_main_page}
                onChange={handleChange}
              />
            }
            label="Show on main page"
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Cancel</Button>
          <Button
            variant="contained"
            onClick={handleSubmit}
            disabled={saving || !form.name.trim()}
          >
            {saving ? 'Savingâ€¦' : form.id ? 'Update' : 'Create'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}
